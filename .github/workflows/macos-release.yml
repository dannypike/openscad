name: macos-release

on:
  push:
    branches:
      - macos-release-build
      - qt5-upgrade-macos
    tags:
      - '*'

jobs:
  build:
    runs-on: macos-latest
    steps:
    - name: Checkout OpenSCAD
      uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Setup MacPorts, Libraries & Build
      run: |
        system_profiler SPHardwareDataType SPSoftwareDataType SPStorageDataType SPDeveloperToolsDataType
        CI_BASEDIR="$(pwd)"
        echo "PWD = $CI_BASEDIR"
        export PATH="/opt/local/bin:/opt/local/sbin:$PATH"
        echo "PATH = $PATH"
        export COLUMNS=80 # needed by some macports tool
        MACPORTS_SHA512=396b457e698848a4e56902162dc8ceee6d71c4d520fa57d2387e9d52363390fffe33a2d0a6e690bd90e9131d036d06db642891beff23eb5956b501423cf8d29f
        MACPORTS_CACHE_SHA512=918a21e561a10484e0d68a612e4f74a8202de538ecc9cc2cb3b340a250fbf4de0715fb789622aec31105ff2aab25e44e7e78cda0f9520374714a991085da0687
        LIBRARIES_CACHE_SHA512=3317f3ef7eacf01bbed7207a30497ba2f56115d5a393ffc11a13da2c3027e72e165aceb4a73314c49a405a0096edb6c77b1097ac18aa6bfe2743dba8ba3ff9cc
        CI_BASEDIR=/Users/runner/work/openscad/openscad
        export OPENSCAD_LIBRARIES=/Users/runner/work/openscad/libraries/install/
        MACPORTS=MacPorts-2.7.1
        MACPORTS_CACHE=macports-gh.tar.bz2
        LIBRARIES_CACHE=libraries-gh.tar.bz2
        mkdir /tmp/out
        mkdir -p "$OPENSCAD_LIBRARIES"
        ( echo "Loading macports cache..." ; cd /tmp && curl -f -s -S --insecure -O https://files.openscad.org/ci-cache/"$MACPORTS_CACHE" ) || true
        ( echo "Loading libraries cache..." ; cd /tmp && curl -f -s -S --insecure -O https://files.openscad.org/ci-cache/"$LIBRARIES_CACHE" ) || true
        sudo mv -iv /usr/local/Cellar /usr/local/.Cellar. || true
        sudo mkdir -p /opt/local
        sudo tar xj -C /opt/local -f /tmp/"$MACPORTS_CACHE" || true
        if [ -f /opt/local/bin/port ]; then
            echo "MacPorts found: $(port version)"
            MACPORTS_CACHE_FILE_SHA512="$(shasum -a 512 /tmp/"$MACPORTS_CACHE" | cut -d ' ' -f 1)"
            if [ "$MACPORTS_CACHE_FILE_SHA512" != "$MACPORTS_CACHE_SHA512" ]; then
                echo "Failed to match sha512 for $MACPORTS_CACHE"
                echo "Expected: $MACPORTS_CACHE_SHA512"
                echo "Actual:   $MACPORTS_CACHE_FILE_SHA512"
                exit 1
            fi
            if [ -f /tmp/"$LIBRARIES_CACHE" ]; then
                tar xj -C "$OPENSCAD_LIBRARIES" -f /tmp/"$LIBRARIES_CACHE" || true
                LIBRARIES_CACHE_FILE_SHA512="$(shasum -a 512 /tmp/"$LIBRARIES_CACHE" | cut -d ' ' -f 1)"
                if [ "$LIBRARIES_CACHE_FILE_SHA512" != "$LIBRARIES_CACHE_SHA512" ]; then
                    echo "Failed to match sha512 for $LIBRARIES_CACHE"
                    echo "Expected: $LIBRARIES_CACHE_SHA512"
                    echo "Actual:   $LIBRARIES_CACHE_FILE_SHA512"
                    exit 1
                fi
            fi
            echo "Start building dependencies: $(date)"
            export PKG_CONFIG_PATH="$OPENSCAD_LIBRARIES/lib/pkgconfig"
            # Avoid pkg-config picking up MacPorts libs instead of system libs (e.g. zlib)
            export PKG_CONFIG_LIBDIR="/usr/lib/"
            # Avoid having cmake pick up MacPorts libraries
            export CMAKE_IGNORE_PATH=/opt/local/lib/
            export DYLD_LIBRARY_PATH="$OPENSCAD_LIBRARIES/lib"
            export DYLD_FRAMEWORK_PATH="$OPENSCAD_LIBRARIES/lib"
            echo "DYLD_LIBRARY_PATH: $DYLD_LIBRARY_PATH"
            export PATH=$OPENSCAD_LIBRARIES/bin:$PATH
            ./scripts/macosx-build-dependencies.sh double_conversion
            ./scripts/macosx-build-dependencies.sh eigen
            ./scripts/macosx-build-dependencies.sh gmp
            ./scripts/macosx-build-dependencies.sh mpfr
            ./scripts/macosx-build-dependencies.sh glew
            ./scripts/macosx-build-dependencies.sh gettext
            ./scripts/macosx-build-dependencies.sh libffi
            ./scripts/macosx-build-dependencies.sh freetype
            ./scripts/macosx-build-dependencies.sh ragel
            ./scripts/macosx-build-dependencies.sh harfbuzz
            ./scripts/macosx-build-dependencies.sh libz
            ./scripts/macosx-build-dependencies.sh libzip
            ./scripts/macosx-build-dependencies.sh libxml2
            ./scripts/macosx-build-dependencies.sh fontconfig || true
            ./scripts/macosx-build-dependencies.sh hidapi
            ./scripts/macosx-build-dependencies.sh libuuid
            ./scripts/macosx-build-dependencies.sh lib3mf
            ./scripts/macosx-build-dependencies.sh poppler
            ./scripts/macosx-build-dependencies.sh pixman
            ./scripts/macosx-build-dependencies.sh cairo
            ./scripts/macosx-build-dependencies.sh glib2
            ./scripts/macosx-build-dependencies.sh boost
            ./scripts/macosx-build-dependencies.sh cgal
            ./scripts/macosx-build-dependencies.sh qt5
            ./scripts/macosx-build-dependencies.sh opencsg
            ./scripts/macosx-build-dependencies.sh qscintilla
            ./scripts/macosx-build-dependencies.sh -d sparkle
            tar cj -C "$OPENSCAD_LIBRARIES" -f /tmp/out/"$LIBRARIES_CACHE" .
            shasum -a 512 /tmp/out/"$LIBRARIES_CACHE" > /tmp/out/"$LIBRARIES_CACHE".sha512
            echo "Start building OpenSCAD: $(date)"
            export NUMCPU=4
            time ./scripts/release-common.sh
            echo "Sanity check of the app bundle..."
            ./scripts/macosx-sanity-check.py build/OpenSCAD.app/Contents/MacOS/OpenSCAD
            cd build
            OPENSCAD_NAME=$(ls OpenSCAD-*.dmg)
            shasum -a 256 "$OPENSCAD_NAME" > "$OPENSCAD_NAME".sha256
            shasum -a 512 "$OPENSCAD_NAME" > "$OPENSCAD_NAME".sha512
            cp -v "$OPENSCAD_NAME"* /tmp/out/
            echo "Finished building OpenSCAD: $(date)"
        else
            echo "MacPorts not found, installing $MACPORTS"
            MACPORTSFILE="$MACPORTS".tar.bz2
            curl -s -S --insecure -O https://distfiles.macports.org/MacPorts/"$MACPORTSFILE"
            if [ "$(shasum -a 512 "$MACPORTSFILE" | cut -d ' ' -f 1)" != "$MACPORTS_SHA512" ]; then
                echo "Failed to match sha512 for $MACPORTSFILE"
                echo "Expected: $MACPORTS_SHA512"
                echo "Actual:   $(shasum -a 512 "$MACPORTSFILE")"
                exit 1
            fi
            tar xjf "$MACPORTSFILE"
            cd "$MACPORTS"
            ./configure
            make
            sudo make install
            sudo port -d selfupdate
            sudo port -N install cmake curl pkgconfig autoconf automake libtool python39
            sudo port select --set python python39
            sudo port select --set python3 python39
            tar cj -C /opt/local -f /tmp/out/"$MACPORTS_CACHE" .
            shasum -a 512 /tmp/out/"$MACPORTS_CACHE"
        fi
    - name: Upload Artifacts
      uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: Build Artifacts
        path: /tmp/out/
